{"remainingRequest":"/Users/danoand/Documents/Companies/TenantSmart/POC/bootstrap/WB04HF123/angular6/ng2angle/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/danoand/Documents/Companies/TenantSmart/POC/bootstrap/WB04HF123/angular6/ng2angle/src/modernizr.js","dependencies":[{"path":"/Users/danoand/Documents/Companies/TenantSmart/POC/bootstrap/WB04HF123/angular6/ng2angle/src/modernizr.js","mtime":1527532994000},{"path":"/Users/danoand/Documents/Companies/TenantSmart/POC/bootstrap/WB04HF123/angular6/ng2angle/node_modules/cache-loader/dist/cjs.js","mtime":1529365652000},{"path":"/Users/danoand/Documents/Companies/TenantSmart/POC/bootstrap/WB04HF123/angular6/ng2angle/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525974352000}],"contextDependencies":[],"result":["/*!\r\n * modernizr v3.3.1\r\n * Build http://modernizr.com/download?-bgpositionshorthand-bgpositionxy-bgrepeatspace_bgrepeatround-bgsizecover-borderradius-cssanimations-csscalc-csstransforms-csstransforms3d-csstransitions-flexboxtweener-fontface-inlinesvg-localstorage-multiplebgs-preserve3d-sessionstorage-smil-svg-svgasimg-svgclippaths-svgfilters-svgforeignobject-websqldatabase-setclasses-dontmin\r\n *\r\n * Copyright (c)\r\n *  Faruk Ates\r\n *  Paul Irish\r\n *  Alex Sexton\r\n *  Ryan Seddon\r\n *  Patrick Kettner\r\n *  Stu Cox\r\n *  Richard Herrera\r\n\r\n * MIT License\r\n */\r\n\r\n/*\r\n * Modernizr tests which native CSS3 and HTML5 features are available in the\r\n * current UA and makes the results available to you in two ways: as properties on\r\n * a global `Modernizr` object, and as classes on the `<html>` element. This\r\n * information allows you to progressively enhance your pages with a granular level\r\n * of control over the experience.\r\n*/\r\n\r\n;(function(window, document, undefined){\r\n  var tests = [];\r\n  \r\n\r\n  /**\r\n   *\r\n   * ModernizrProto is the constructor for Modernizr\r\n   *\r\n   * @class\r\n   * @access public\r\n   */\r\n\r\n  var ModernizrProto = {\r\n    // The current version, dummy\r\n    _version: '3.3.1',\r\n\r\n    // Any settings that don't work as separate modules\r\n    // can go in here as configuration.\r\n    _config: {\r\n      'classPrefix': '',\r\n      'enableClasses': true,\r\n      'enableJSClass': true,\r\n      'usePrefixes': true\r\n    },\r\n\r\n    // Queue of tests\r\n    _q: [],\r\n\r\n    // Stub these for people who are listening\r\n    on: function(test, cb) {\r\n      // I don't really think people should do this, but we can\r\n      // safe guard it a bit.\r\n      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.\r\n      // This is in case people listen to synchronous tests. I would leave it out,\r\n      // but the code to *disallow* sync tests in the real version of this\r\n      // function is actually larger than this.\r\n      var self = this;\r\n      setTimeout(function() {\r\n        cb(self[test]);\r\n      }, 0);\r\n    },\r\n\r\n    addTest: function(name, fn, options) {\r\n      tests.push({name: name, fn: fn, options: options});\r\n    },\r\n\r\n    addAsyncTest: function(fn) {\r\n      tests.push({name: null, fn: fn});\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  // Fake some of Object.create so we can force non test results to be non \"own\" properties.\r\n  var Modernizr = function() {};\r\n  Modernizr.prototype = ModernizrProto;\r\n\r\n  // Leak modernizr globally when you `require` it rather than force it here.\r\n  // Overwrite name so constructor name is nicer :D\r\n  Modernizr = new Modernizr();\r\n\r\n  \r\n\r\n  var classes = [];\r\n  \r\n\r\n  /**\r\n   * is returns a boolean if the typeof an obj is exactly type.\r\n   *\r\n   * @access private\r\n   * @function is\r\n   * @param {*} obj - A thing we want to check the type of\r\n   * @param {string} type - A string to compare the typeof against\r\n   * @returns {boolean}\r\n   */\r\n\r\n  function is(obj, type) {\r\n    return typeof obj === type;\r\n  }\r\n  ;\r\n\r\n  /**\r\n   * Run through all tests and detect their support in the current UA.\r\n   *\r\n   * @access private\r\n   */\r\n\r\n  function testRunner() {\r\n    var featureNames;\r\n    var feature;\r\n    var aliasIdx;\r\n    var result;\r\n    var nameIdx;\r\n    var featureName;\r\n    var featureNameSplit;\r\n\r\n    for (var featureIdx in tests) {\r\n      if (tests.hasOwnProperty(featureIdx)) {\r\n        featureNames = [];\r\n        feature = tests[featureIdx];\r\n        // run the test, throw the return value into the Modernizr,\r\n        // then based on that boolean, define an appropriate className\r\n        // and push it into an array of classes we'll join later.\r\n        //\r\n        // If there is no name, it's an 'async' test that is run,\r\n        // but not directly added to the object. That should\r\n        // be done with a post-run addTest call.\r\n        if (feature.name) {\r\n          featureNames.push(feature.name.toLowerCase());\r\n\r\n          if (feature.options && feature.options.aliases && feature.options.aliases.length) {\r\n            // Add all the aliases into the names list\r\n            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\r\n              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\r\n            }\r\n          }\r\n        }\r\n\r\n        // Run the test, or use the raw value if it's not a function\r\n        result = is(feature.fn, 'function') ? feature.fn() : feature.fn;\r\n\r\n\r\n        // Set each of the names on the Modernizr object\r\n        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\r\n          featureName = featureNames[nameIdx];\r\n          // Support dot properties as sub tests. We don't do checking to make sure\r\n          // that the implied parent tests have been added. You must call them in\r\n          // order (either in the test, or make the parent test a dependency).\r\n          //\r\n          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\r\n          // hashtag famous last words\r\n          featureNameSplit = featureName.split('.');\r\n\r\n          if (featureNameSplit.length === 1) {\r\n            Modernizr[featureNameSplit[0]] = result;\r\n          } else {\r\n            // cast to a Boolean, if not one already\r\n            /* jshint -W053 */\r\n            if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\r\n              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\r\n            }\r\n\r\n            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\r\n          }\r\n\r\n          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\r\n        }\r\n      }\r\n    }\r\n  }\r\n  ;\r\n\r\n  /**\r\n   * docElement is a convenience wrapper to grab the root element of the document\r\n   *\r\n   * @access private\r\n   * @returns {HTMLElement|SVGElement} The root element of the document\r\n   */\r\n\r\n  var docElement = document.documentElement;\r\n  \r\n\r\n  /**\r\n   * A convenience helper to check if the document we are running in is an SVG document\r\n   *\r\n   * @access private\r\n   * @returns {boolean}\r\n   */\r\n\r\n  var isSVG = docElement.nodeName.toLowerCase() === 'svg';\r\n  \r\n\r\n  /**\r\n   * setClasses takes an array of class names and adds them to the root element\r\n   *\r\n   * @access private\r\n   * @function setClasses\r\n   * @param {string[]} classes - Array of class names\r\n   */\r\n\r\n  // Pass in an and array of class names, e.g.:\r\n  //  ['no-webp', 'borderradius', ...]\r\n  function setClasses(classes) {\r\n    var className = docElement.className;\r\n    var classPrefix = Modernizr._config.classPrefix || '';\r\n\r\n    if (isSVG) {\r\n      className = className.baseVal;\r\n    }\r\n\r\n    // Change `no-js` to `js` (independently of the `enableClasses` option)\r\n    // Handle classPrefix on this too\r\n    if (Modernizr._config.enableJSClass) {\r\n      var reJS = new RegExp('(^|\\\\s)' + classPrefix + 'no-js(\\\\s|$)');\r\n      className = className.replace(reJS, '$1' + classPrefix + 'js$2');\r\n    }\r\n\r\n    if (Modernizr._config.enableClasses) {\r\n      // Add the new classes\r\n      className += ' ' + classPrefix + classes.join(' ' + classPrefix);\r\n      isSVG ? docElement.className.baseVal = className : docElement.className = className;\r\n    }\r\n\r\n  }\r\n\r\n  ;\r\n\r\n  /**\r\n   * createElement is a convenience wrapper around document.createElement. Since we\r\n   * use createElement all over the place, this allows for (slightly) smaller code\r\n   * as well as abstracting away issues with creating elements in contexts other than\r\n   * HTML documents (e.g. SVG documents).\r\n   *\r\n   * @access private\r\n   * @function createElement\r\n   * @returns {HTMLElement|SVGElement} An HTML or SVG element\r\n   */\r\n\r\n  function createElement() {\r\n    if (typeof document.createElement !== 'function') {\r\n      // This is the case in IE7, where the type of createElement is \"object\".\r\n      // For this reason, we cannot call apply() as Object is not a Function.\r\n      return document.createElement(arguments[0]);\r\n    } else if (isSVG) {\r\n      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\r\n    } else {\r\n      return document.createElement.apply(document, arguments);\r\n    }\r\n  }\r\n\r\n  ;\r\n/*!\r\n{\r\n  \"name\": \"Background Position Shorthand\",\r\n  \"property\": \"bgpositionshorthand\",\r\n  \"tags\": [\"css\"],\r\n  \"builderAliases\": [\"css_backgroundposition_shorthand\"],\r\n  \"notes\": [{\r\n    \"name\": \"MDN Docs\",\r\n    \"href\": \"https://developer.mozilla.org/en/CSS/background-position\"\r\n  }, {\r\n    \"name\": \"W3 Spec\",\r\n    \"href\": \"https://www.w3.org/TR/css3-background/#background-position\"\r\n  }, {\r\n    \"name\": \"Demo\",\r\n    \"href\": \"https://jsfiddle.net/Blink/bBXvt/\"\r\n  }]\r\n}\r\n!*/\r\n/* DOC\r\nDetects if you can use the shorthand method to define multiple parts of an\r\nelement's background-position simultaniously.\r\n\r\neg `background-position: right 10px bottom 10px`\r\n*/\r\n\r\n  Modernizr.addTest('bgpositionshorthand', function() {\r\n    var elem = createElement('a');\r\n    var eStyle = elem.style;\r\n    var val = 'right 10px bottom 10px';\r\n    eStyle.cssText = 'background-position: ' + val + ';';\r\n    return (eStyle.backgroundPosition === val);\r\n  });\r\n\r\n\r\n  /**\r\n   * If the browsers follow the spec, then they would expose vendor-specific style as:\r\n   *   elem.style.WebkitBorderRadius\r\n   * instead of something like the following, which would be technically incorrect:\r\n   *   elem.style.webkitBorderRadius\r\n\r\n   * Webkit ghosts their properties in lowercase but Opera & Moz do not.\r\n   * Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+\r\n   *   erik.eae.net/archives/2008/03/10/21.48.10/\r\n\r\n   * More here: github.com/Modernizr/Modernizr/issues/issue/21\r\n   *\r\n   * @access private\r\n   * @returns {string} The string representing the vendor-specific style properties\r\n   */\r\n\r\n  var omPrefixes = 'Moz O ms Webkit';\r\n  \r\n\r\n  var cssomPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.split(' ') : []);\r\n  ModernizrProto._cssomPrefixes = cssomPrefixes;\r\n  \r\n\r\n\r\n  /**\r\n   * contains checks to see if a string contains another string\r\n   *\r\n   * @access private\r\n   * @function contains\r\n   * @param {string} str - The string we want to check for substrings\r\n   * @param {string} substr - The substring we want to search the first string for\r\n   * @returns {boolean}\r\n   */\r\n\r\n  function contains(str, substr) {\r\n    return !!~('' + str).indexOf(substr);\r\n  }\r\n\r\n  ;\r\n\r\n  /**\r\n   * Create our \"modernizr\" element that we do most feature tests on.\r\n   *\r\n   * @access private\r\n   */\r\n\r\n  var modElem = {\r\n    elem: createElement('modernizr')\r\n  };\r\n\r\n  // Clean up this element\r\n  Modernizr._q.push(function() {\r\n    delete modElem.elem;\r\n  });\r\n\r\n  \r\n\r\n  var mStyle = {\r\n    style: modElem.elem.style\r\n  };\r\n\r\n  // kill ref for gc, must happen before mod.elem is removed, so we unshift on to\r\n  // the front of the queue.\r\n  Modernizr._q.unshift(function() {\r\n    delete mStyle.style;\r\n  });\r\n\r\n  \r\n\r\n  /**\r\n   * getBody returns the body of a document, or an element that can stand in for\r\n   * the body if a real body does not exist\r\n   *\r\n   * @access private\r\n   * @function getBody\r\n   * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an\r\n   * artificially created element that stands in for the body\r\n   */\r\n\r\n  function getBody() {\r\n    // After page load injecting a fake body doesn't work so check if body exists\r\n    var body = document.body;\r\n\r\n    if (!body) {\r\n      // Can't use the real body create a fake one.\r\n      body = createElement(isSVG ? 'svg' : 'body');\r\n      body.fake = true;\r\n    }\r\n\r\n    return body;\r\n  }\r\n\r\n  ;\r\n\r\n  /**\r\n   * injectElementWithStyles injects an element with style element and some CSS rules\r\n   *\r\n   * @access private\r\n   * @function injectElementWithStyles\r\n   * @param {string} rule - String representing a css rule\r\n   * @param {function} callback - A function that is used to test the injected element\r\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\r\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\r\n   * @returns {boolean}\r\n   */\r\n\r\n  function injectElementWithStyles(rule, callback, nodes, testnames) {\r\n    var mod = 'modernizr';\r\n    var style;\r\n    var ret;\r\n    var node;\r\n    var docOverflow;\r\n    var div = createElement('div');\r\n    var body = getBody();\r\n\r\n    if (parseInt(nodes, 10)) {\r\n      // In order not to give false positives we create a node for each test\r\n      // This also allows the method to scale for unspecified uses\r\n      while (nodes--) {\r\n        node = createElement('div');\r\n        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\r\n        div.appendChild(node);\r\n      }\r\n    }\r\n\r\n    style = createElement('style');\r\n    style.type = 'text/css';\r\n    style.id = 's' + mod;\r\n\r\n    // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\r\n    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\r\n    (!body.fake ? div : body).appendChild(style);\r\n    body.appendChild(div);\r\n\r\n    if (style.styleSheet) {\r\n      style.styleSheet.cssText = rule;\r\n    } else {\r\n      style.appendChild(document.createTextNode(rule));\r\n    }\r\n    div.id = mod;\r\n\r\n    if (body.fake) {\r\n      //avoid crashing IE8, if background image is used\r\n      body.style.background = '';\r\n      //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\r\n      body.style.overflow = 'hidden';\r\n      docOverflow = docElement.style.overflow;\r\n      docElement.style.overflow = 'hidden';\r\n      docElement.appendChild(body);\r\n    }\r\n\r\n    ret = callback(div, rule);\r\n    // If this is done after page load we don't want to remove the body so check if body exists\r\n    if (body.fake) {\r\n      body.parentNode.removeChild(body);\r\n      docElement.style.overflow = docOverflow;\r\n      // Trigger layout so kinetic scrolling isn't disabled in iOS6+\r\n      docElement.offsetHeight;\r\n    } else {\r\n      div.parentNode.removeChild(div);\r\n    }\r\n\r\n    return !!ret;\r\n\r\n  }\r\n\r\n  ;\r\n\r\n  /**\r\n   * domToCSS takes a camelCase string and converts it to kebab-case\r\n   * e.g. boxSizing -> box-sizing\r\n   *\r\n   * @access private\r\n   * @function domToCSS\r\n   * @param {string} name - String name of camelCase prop we want to convert\r\n   * @returns {string} The kebab-case version of the supplied name\r\n   */\r\n\r\n  function domToCSS(name) {\r\n    return name.replace(/([A-Z])/g, function(str, m1) {\r\n      return '-' + m1.toLowerCase();\r\n    }).replace(/^ms-/, '-ms-');\r\n  }\r\n  ;\r\n\r\n  /**\r\n   * nativeTestProps allows for us to use native feature detection functionality if available.\r\n   * some prefixed form, or false, in the case of an unsupported rule\r\n   *\r\n   * @access private\r\n   * @function nativeTestProps\r\n   * @param {array} props - An array of property names\r\n   * @param {string} value - A string representing the value we want to check via @supports\r\n   * @returns {boolean|undefined} A boolean when @supports exists, undefined otherwise\r\n   */\r\n\r\n  // Accepts a list of property names and a single value\r\n  // Returns `undefined` if native detection not available\r\n  function nativeTestProps(props, value) {\r\n    var i = props.length;\r\n    // Start with the JS API: http://www.w3.org/TR/css3-conditional/#the-css-interface\r\n    if ('CSS' in window && 'supports' in window.CSS) {\r\n      // Try every prefixed variant of the property\r\n      while (i--) {\r\n        if (window.CSS.supports(domToCSS(props[i]), value)) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n    // Otherwise fall back to at-rule (for Opera 12.x)\r\n    else if ('CSSSupportsRule' in window) {\r\n      // Build a condition string for every prefixed variant\r\n      var conditionText = [];\r\n      while (i--) {\r\n        conditionText.push('(' + domToCSS(props[i]) + ':' + value + ')');\r\n      }\r\n      conditionText = conditionText.join(' or ');\r\n      return injectElementWithStyles('@supports (' + conditionText + ') { #modernizr { position: absolute; } }', function(node) {\r\n        return getComputedStyle(node, null).position == 'absolute';\r\n      });\r\n    }\r\n    return undefined;\r\n  }\r\n  ;\r\n\r\n  /**\r\n   * cssToDOM takes a kebab-case string and converts it to camelCase\r\n   * e.g. box-sizing -> boxSizing\r\n   *\r\n   * @access private\r\n   * @function cssToDOM\r\n   * @param {string} name - String name of kebab-case prop we want to convert\r\n   * @returns {string} The camelCase version of the supplied name\r\n   */\r\n\r\n  function cssToDOM(name) {\r\n    return name.replace(/([a-z])-([a-z])/g, function(str, m1, m2) {\r\n      return m1 + m2.toUpperCase();\r\n    }).replace(/^-/, '');\r\n  }\r\n  ;\r\n\r\n  // testProps is a generic CSS / DOM property test.\r\n\r\n  // In testing support for a given CSS property, it's legit to test:\r\n  //    `elem.style[styleName] !== undefined`\r\n  // If the property is supported it will return an empty string,\r\n  // if unsupported it will return undefined.\r\n\r\n  // We'll take advantage of this quick test and skip setting a style\r\n  // on our modernizr element, but instead just testing undefined vs\r\n  // empty string.\r\n\r\n  // Property names can be provided in either camelCase or kebab-case.\r\n\r\n  function testProps(props, prefixed, value, skipValueTest) {\r\n    skipValueTest = is(skipValueTest, 'undefined') ? false : skipValueTest;\r\n\r\n    // Try native detect first\r\n    if (!is(value, 'undefined')) {\r\n      var result = nativeTestProps(props, value);\r\n      if (!is(result, 'undefined')) {\r\n        return result;\r\n      }\r\n    }\r\n\r\n    // Otherwise do it properly\r\n    var afterInit, i, propsLength, prop, before;\r\n\r\n    // If we don't have a style element, that means we're running async or after\r\n    // the core tests, so we'll need to create our own elements to use\r\n\r\n    // inside of an SVG element, in certain browsers, the `style` element is only\r\n    // defined for valid tags. Therefore, if `modernizr` does not have one, we\r\n    // fall back to a less used element and hope for the best.\r\n    var elems = ['modernizr', 'tspan'];\r\n    while (!mStyle.style) {\r\n      afterInit = true;\r\n      mStyle.modElem = createElement(elems.shift());\r\n      mStyle.style = mStyle.modElem.style;\r\n    }\r\n\r\n    // Delete the objects if we created them.\r\n    function cleanElems() {\r\n      if (afterInit) {\r\n        delete mStyle.style;\r\n        delete mStyle.modElem;\r\n      }\r\n    }\r\n\r\n    propsLength = props.length;\r\n    for (i = 0; i < propsLength; i++) {\r\n      prop = props[i];\r\n      before = mStyle.style[prop];\r\n\r\n      if (contains(prop, '-')) {\r\n        prop = cssToDOM(prop);\r\n      }\r\n\r\n      if (mStyle.style[prop] !== undefined) {\r\n\r\n        // If value to test has been passed in, do a set-and-check test.\r\n        // 0 (integer) is a valid property value, so check that `value` isn't\r\n        // undefined, rather than just checking it's truthy.\r\n        if (!skipValueTest && !is(value, 'undefined')) {\r\n\r\n          // Needs a try catch block because of old IE. This is slow, but will\r\n          // be avoided in most cases because `skipValueTest` will be used.\r\n          try {\r\n            mStyle.style[prop] = value;\r\n          } catch (e) {}\r\n\r\n          // If the property value has changed, we assume the value used is\r\n          // supported. If `value` is empty string, it'll fail here (because\r\n          // it hasn't changed), which matches how browsers have implemented\r\n          // CSS.supports()\r\n          if (mStyle.style[prop] != before) {\r\n            cleanElems();\r\n            return prefixed == 'pfx' ? prop : true;\r\n          }\r\n        }\r\n        // Otherwise just return true, or the property name if this is a\r\n        // `prefixed()` call\r\n        else {\r\n          cleanElems();\r\n          return prefixed == 'pfx' ? prop : true;\r\n        }\r\n      }\r\n    }\r\n    cleanElems();\r\n    return false;\r\n  }\r\n\r\n  ;\r\n\r\n  /**\r\n   * List of JavaScript DOM values used for tests\r\n   *\r\n   * @memberof Modernizr\r\n   * @name Modernizr._domPrefixes\r\n   * @optionName Modernizr._domPrefixes\r\n   * @optionProp domPrefixes\r\n   * @access public\r\n   * @example\r\n   *\r\n   * Modernizr._domPrefixes is exactly the same as [_prefixes](#modernizr-_prefixes), but rather\r\n   * than kebab-case properties, all properties are their Capitalized variant\r\n   *\r\n   * ```js\r\n   * Modernizr._domPrefixes === [ \"Moz\", \"O\", \"ms\", \"Webkit\" ];\r\n   * ```\r\n   */\r\n\r\n  var domPrefixes = (ModernizrProto._config.usePrefixes ? omPrefixes.toLowerCase().split(' ') : []);\r\n  ModernizrProto._domPrefixes = domPrefixes;\r\n  \r\n\r\n  /**\r\n   * fnBind is a super small [bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind) polyfill.\r\n   *\r\n   * @access private\r\n   * @function fnBind\r\n   * @param {function} fn - a function you want to change `this` reference to\r\n   * @param {object} that - the `this` you want to call the function with\r\n   * @returns {function} The wrapped version of the supplied function\r\n   */\r\n\r\n  function fnBind(fn, that) {\r\n    return function() {\r\n      return fn.apply(that, arguments);\r\n    };\r\n  }\r\n\r\n  ;\r\n\r\n  /**\r\n   * testDOMProps is a generic DOM property test; if a browser supports\r\n   *   a certain property, it won't return undefined for it.\r\n   *\r\n   * @access private\r\n   * @function testDOMProps\r\n   * @param {array.<string>} props - An array of properties to test for\r\n   * @param {object} obj - An object or Element you want to use to test the parameters again\r\n   * @param {boolean|object} elem - An Element to bind the property lookup again. Use `false` to prevent the check\r\n   */\r\n  function testDOMProps(props, obj, elem) {\r\n    var item;\r\n\r\n    for (var i in props) {\r\n      if (props[i] in obj) {\r\n\r\n        // return the property name as a string\r\n        if (elem === false) {\r\n          return props[i];\r\n        }\r\n\r\n        item = obj[props[i]];\r\n\r\n        // let's bind a function\r\n        if (is(item, 'function')) {\r\n          // bind to obj unless overriden\r\n          return fnBind(item, elem || obj);\r\n        }\r\n\r\n        // return the unbound function or obj or value\r\n        return item;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  ;\r\n\r\n  /**\r\n   * testPropsAll tests a list of DOM properties we want to check against.\r\n   * We specify literally ALL possible (known and/or likely) properties on\r\n   * the element including the non-vendor prefixed one, for forward-\r\n   * compatibility.\r\n   *\r\n   * @access private\r\n   * @function testPropsAll\r\n   * @param {string} prop - A string of the property to test for\r\n   * @param {string|object} [prefixed] - An object to check the prefixed properties on. Use a string to skip\r\n   * @param {HTMLElement|SVGElement} [elem] - An element used to test the property and value against\r\n   * @param {string} [value] - A string of a css value\r\n   * @param {boolean} [skipValueTest] - An boolean representing if you want to test if value sticks when set\r\n   */\r\n  function testPropsAll(prop, prefixed, elem, value, skipValueTest) {\r\n\r\n    var ucProp = prop.charAt(0).toUpperCase() + prop.slice(1),\r\n    props = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');\r\n\r\n    // did they call .prefixed('boxSizing') or are we just testing a prop?\r\n    if (is(prefixed, 'string') || is(prefixed, 'undefined')) {\r\n      return testProps(props, prefixed, value, skipValueTest);\r\n\r\n      // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])\r\n    } else {\r\n      props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');\r\n      return testDOMProps(props, prefixed, elem);\r\n    }\r\n  }\r\n\r\n  // Modernizr.testAllProps() investigates whether a given style property,\r\n  // or any of its vendor-prefixed variants, is recognized\r\n  //\r\n  // Note that the property names must be provided in the camelCase variant.\r\n  // Modernizr.testAllProps('boxSizing')\r\n  ModernizrProto.testAllProps = testPropsAll;\r\n\r\n  \r\n\r\n  /**\r\n   * testAllProps determines whether a given CSS property is supported in the browser\r\n   *\r\n   * @memberof Modernizr\r\n   * @name Modernizr.testAllProps\r\n   * @optionName Modernizr.testAllProps()\r\n   * @optionProp testAllProps\r\n   * @access public\r\n   * @function testAllProps\r\n   * @param {string} prop - String naming the property to test (either camelCase or kebab-case)\r\n   * @param {string} [value] - String of the value to test\r\n   * @param {boolean} [skipValueTest=false] - Whether to skip testing that the value is supported when using non-native detection\r\n   * @example\r\n   *\r\n   * testAllProps determines whether a given CSS property, in some prefixed form,\r\n   * is supported by the browser.\r\n   *\r\n   * ```js\r\n   * testAllProps('boxSizing')  // true\r\n   * ```\r\n   *\r\n   * It can optionally be given a CSS value in string form to test if a property\r\n   * value is valid\r\n   *\r\n   * ```js\r\n   * testAllProps('display', 'block') // true\r\n   * testAllProps('display', 'penguin') // false\r\n   * ```\r\n   *\r\n   * A boolean can be passed as a third parameter to skip the value check when\r\n   * native detection (@supports) isn't available.\r\n   *\r\n   * ```js\r\n   * testAllProps('shapeOutside', 'content-box', true);\r\n   * ```\r\n   */\r\n\r\n  function testAllProps(prop, value, skipValueTest) {\r\n    return testPropsAll(prop, undefined, undefined, value, skipValueTest);\r\n  }\r\n  ModernizrProto.testAllProps = testAllProps;\r\n  \r\n/*!\r\n{\r\n  \"name\": \"Background Position XY\",\r\n  \"property\": \"bgpositionxy\",\r\n  \"tags\": [\"css\"],\r\n  \"builderAliases\": [\"css_backgroundposition_xy\"],\r\n  \"authors\": [\"Allan Lei\", \"Brandom Aaron\"],\r\n  \"notes\": [{\r\n    \"name\": \"Demo\",\r\n    \"href\": \"https://jsfiddle.net/allanlei/R8AYS/\"\r\n  }, {\r\n    \"name\": \"Adapted From\",\r\n    \"href\": \"https://github.com/brandonaaron/jquery-cssHooks/blob/master/bgpos.js\"\r\n  }]\r\n}\r\n!*/\r\n/* DOC\r\nDetects the ability to control an element's background position using css\r\n*/\r\n\r\n  Modernizr.addTest('bgpositionxy', function() {\r\n    return testAllProps('backgroundPositionX', '3px', true) && testAllProps('backgroundPositionY', '5px', true);\r\n  });\r\n\r\n/*!\r\n{\r\n  \"name\": \"Background Repeat\",\r\n  \"property\": [\"bgrepeatspace\", \"bgrepeatround\"],\r\n  \"tags\": [\"css\"],\r\n  \"builderAliases\": [\"css_backgroundrepeat\"],\r\n  \"authors\": [\"Ryan Seddon\"],\r\n  \"notes\": [{\r\n    \"name\": \"MDN Docs\",\r\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat\"\r\n  }, {\r\n    \"name\": \"Test Page\",\r\n    \"href\": \"https://jsbin.com/uzesun/\"\r\n  }, {\r\n    \"name\": \"Demo\",\r\n    \"href\": \"https://jsfiddle.net/ryanseddon/yMLTQ/6/\"\r\n  }]\r\n}\r\n!*/\r\n/* DOC\r\nDetects the ability to use round and space as properties for background-repeat\r\n*/\r\n\r\n  // Must value-test these\r\n  Modernizr.addTest('bgrepeatround', testAllProps('backgroundRepeat', 'round'));\r\n  Modernizr.addTest('bgrepeatspace', testAllProps('backgroundRepeat', 'space'));\r\n\r\n/*!\r\n{\r\n  \"name\": \"Background Size Cover\",\r\n  \"property\": \"bgsizecover\",\r\n  \"tags\": [\"css\"],\r\n  \"builderAliases\": [\"css_backgroundsizecover\"],\r\n  \"notes\": [{\r\n    \"name\" : \"MDN Docs\",\r\n    \"href\": \"https://developer.mozilla.org/en/CSS/background-size\"\r\n  }]\r\n}\r\n!*/\r\n\r\n  // Must test value, as this specifically tests the `cover` value\r\n  Modernizr.addTest('bgsizecover', testAllProps('backgroundSize', 'cover'));\r\n\r\n/*!\r\n{\r\n  \"name\": \"Border Radius\",\r\n  \"property\": \"borderradius\",\r\n  \"caniuse\": \"border-radius\",\r\n  \"polyfills\": [\"css3pie\"],\r\n  \"tags\": [\"css\"],\r\n  \"notes\": [{\r\n    \"name\": \"Comprehensive Compat Chart\",\r\n    \"href\": \"https://muddledramblings.com/table-of-css3-border-radius-compliance\"\r\n  }]\r\n}\r\n!*/\r\n\r\n  Modernizr.addTest('borderradius', testAllProps('borderRadius', '0px', true));\r\n\r\n/*!\r\n{\r\n  \"name\": \"CSS Animations\",\r\n  \"property\": \"cssanimations\",\r\n  \"caniuse\": \"css-animation\",\r\n  \"polyfills\": [\"transformie\", \"csssandpaper\"],\r\n  \"tags\": [\"css\"],\r\n  \"warnings\": [\"Android < 4 will pass this test, but can only animate a single property at a time\"],\r\n  \"notes\": [{\r\n    \"name\" : \"Article: 'Dispelling the Android CSS animation myths'\",\r\n    \"href\": \"https://goo.gl/OGw5Gm\"\r\n  }]\r\n}\r\n!*/\r\n/* DOC\r\nDetects whether or not elements can be animated using CSS\r\n*/\r\n\r\n  Modernizr.addTest('cssanimations', testAllProps('animationName', 'a', true));\r\n\r\n\r\n  /**\r\n   * List of property values to set for css tests. See ticket #21\r\n   * http://git.io/vUGl4\r\n   *\r\n   * @memberof Modernizr\r\n   * @name Modernizr._prefixes\r\n   * @optionName Modernizr._prefixes\r\n   * @optionProp prefixes\r\n   * @access public\r\n   * @example\r\n   *\r\n   * Modernizr._prefixes is the internal list of prefixes that we test against\r\n   * inside of things like [prefixed](#modernizr-prefixed) and [prefixedCSS](#-code-modernizr-prefixedcss). It is simply\r\n   * an array of kebab-case vendor prefixes you can use within your code.\r\n   *\r\n   * Some common use cases include\r\n   *\r\n   * Generating all possible prefixed version of a CSS property\r\n   * ```js\r\n   * var rule = Modernizr._prefixes.join('transform: rotate(20deg); ');\r\n   *\r\n   * rule === 'transform: rotate(20deg); webkit-transform: rotate(20deg); moz-transform: rotate(20deg); o-transform: rotate(20deg); ms-transform: rotate(20deg);'\r\n   * ```\r\n   *\r\n   * Generating all possible prefixed version of a CSS value\r\n   * ```js\r\n   * rule = 'display:' +  Modernizr._prefixes.join('flex; display:') + 'flex';\r\n   *\r\n   * rule === 'display:flex; display:-webkit-flex; display:-moz-flex; display:-o-flex; display:-ms-flex; display:flex'\r\n   * ```\r\n   */\r\n\r\n  var prefixes = (ModernizrProto._config.usePrefixes ? ' -webkit- -moz- -o- -ms- '.split(' ') : []);\r\n\r\n  // expose these for the plugin API. Look in the source for how to join() them against your input\r\n  ModernizrProto._prefixes = prefixes;\r\n\r\n  \r\n/*!\r\n{\r\n  \"name\": \"CSS Calc\",\r\n  \"property\": \"csscalc\",\r\n  \"caniuse\": \"calc\",\r\n  \"tags\": [\"css\"],\r\n  \"builderAliases\": [\"css_calc\"],\r\n  \"authors\": [\"@calvein\"]\r\n}\r\n!*/\r\n/* DOC\r\nMethod of allowing calculated values for length units. For example:\r\n\r\n```css\r\n//lem {\r\n  width: calc(100% - 3em);\r\n}\r\n```\r\n*/\r\n\r\n  Modernizr.addTest('csscalc', function() {\r\n    var prop = 'width:';\r\n    var value = 'calc(10px);';\r\n    var el = createElement('a');\r\n\r\n    el.style.cssText = prop + prefixes.join(value + prop);\r\n\r\n    return !!el.style.length;\r\n  });\r\n\r\n/*!\r\n{\r\n  \"name\": \"CSS Transforms\",\r\n  \"property\": \"csstransforms\",\r\n  \"caniuse\": \"transforms2d\",\r\n  \"tags\": [\"css\"]\r\n}\r\n!*/\r\n\r\n  Modernizr.addTest('csstransforms', function() {\r\n    // Android < 3.0 is buggy, so we sniff and blacklist\r\n    // http://git.io/hHzL7w\r\n    return navigator.userAgent.indexOf('Android 2.') === -1 &&\r\n           testAllProps('transform', 'scale(1)', true);\r\n  });\r\n\r\n\r\n  /**\r\n   * testStyles injects an element with style element and some CSS rules\r\n   *\r\n   * @memberof Modernizr\r\n   * @name Modernizr.testStyles\r\n   * @optionName Modernizr.testStyles()\r\n   * @optionProp testStyles\r\n   * @access public\r\n   * @function testStyles\r\n   * @param {string} rule - String representing a css rule\r\n   * @param {function} callback - A function that is used to test the injected element\r\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\r\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\r\n   * @returns {boolean}\r\n   * @example\r\n   *\r\n   * `Modernizr.testStyles` takes a CSS rule and injects it onto the current page\r\n   * along with (possibly multiple) DOM elements. This lets you check for features\r\n   * that can not be detected by simply checking the [IDL](https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Interface_development_guide/IDL_interface_rules).\r\n   *\r\n   * ```js\r\n   * Modernizr.testStyles('#modernizr { width: 9px; color: papayawhip; }', function(elem, rule) {\r\n   *   // elem is the first DOM node in the page (by default #modernizr)\r\n   *   // rule is the first argument you supplied - the CSS rule in string form\r\n   *\r\n   *   addTest('widthworks', elem.style.width === '9px')\r\n   * });\r\n   * ```\r\n   *\r\n   * If your test requires multiple nodes, you can include a third argument\r\n   * indicating how many additional div elements to include on the page. The\r\n   * additional nodes are injected as children of the `elem` that is returned as\r\n   * the first argument to the callback.\r\n   *\r\n   * ```js\r\n   * Modernizr.testStyles('#modernizr {width: 1px}; #modernizr2 {width: 2px}', function(elem) {\r\n   *   document.getElementById('modernizr').style.width === '1px'; // true\r\n   *   document.getElementById('modernizr2').style.width === '2px'; // true\r\n   *   elem.firstChild === document.getElementById('modernizr2'); // true\r\n   * }, 1);\r\n   * ```\r\n   *\r\n   * By default, all of the additional elements have an ID of `modernizr[n]`, where\r\n   * `n` is its index (e.g. the first additional, second overall is `#modernizr2`,\r\n   * the second additional is `#modernizr3`, etc.).\r\n   * If you want to have more meaningful IDs for your function, you can provide\r\n   * them as the fourth argument, as an array of strings\r\n   *\r\n   * ```js\r\n   * Modernizr.testStyles('#foo {width: 10px}; #bar {height: 20px}', function(elem) {\r\n   *   elem.firstChild === document.getElementById('foo'); // true\r\n   *   elem.lastChild === document.getElementById('bar'); // true\r\n   * }, 2, ['foo', 'bar']);\r\n   * ```\r\n   *\r\n   */\r\n\r\n  var testStyles = ModernizrProto.testStyles = injectElementWithStyles;\r\n  \r\n/*!\r\n{\r\n  \"name\": \"CSS Supports\",\r\n  \"property\": \"supports\",\r\n  \"caniuse\": \"css-featurequeries\",\r\n  \"tags\": [\"css\"],\r\n  \"builderAliases\": [\"css_supports\"],\r\n  \"notes\": [{\r\n    \"name\": \"W3 Spec\",\r\n    \"href\": \"http://dev.w3.org/csswg/css3-conditional/#at-supports\"\r\n  },{\r\n    \"name\": \"Related Github Issue\",\r\n    \"href\": \"github.com/Modernizr/Modernizr/issues/648\"\r\n  },{\r\n    \"name\": \"W3 Info\",\r\n    \"href\": \"http://dev.w3.org/csswg/css3-conditional/#the-csssupportsrule-interface\"\r\n  }]\r\n}\r\n!*/\r\n\r\n  var newSyntax = 'CSS' in window && 'supports' in window.CSS;\r\n  var oldSyntax = 'supportsCSS' in window;\r\n  Modernizr.addTest('supports', newSyntax || oldSyntax);\r\n\r\n/*!\r\n{\r\n  \"name\": \"CSS Transforms 3D\",\r\n  \"property\": \"csstransforms3d\",\r\n  \"caniuse\": \"transforms3d\",\r\n  \"tags\": [\"css\"],\r\n  \"warnings\": [\r\n    \"Chrome may occassionally fail this test on some systems; more info: https://code.google.com/p/chromium/issues/detail?id=129004\"\r\n  ]\r\n}\r\n!*/\r\n\r\n  Modernizr.addTest('csstransforms3d', function() {\r\n    var ret = !!testAllProps('perspective', '1px', true);\r\n    var usePrefix = Modernizr._config.usePrefixes;\r\n\r\n    // Webkit's 3D transforms are passed off to the browser's own graphics renderer.\r\n    //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in\r\n    //   some conditions. As a result, Webkit typically recognizes the syntax but\r\n    //   will sometimes throw a false positive, thus we must do a more thorough check:\r\n    if (ret && (!usePrefix || 'webkitPerspective' in docElement.style)) {\r\n      var mq;\r\n      var defaultStyle = '#modernizr{width:0;height:0}';\r\n      // Use CSS Conditional Rules if available\r\n      if (Modernizr.supports) {\r\n        mq = '@supports (perspective: 1px)';\r\n      } else {\r\n        // Otherwise, Webkit allows this media query to succeed only if the feature is enabled.\r\n        // `@media (transform-3d),(-webkit-transform-3d){ ... }`\r\n        mq = '@media (transform-3d)';\r\n        if (usePrefix) {\r\n          mq += ',(-webkit-transform-3d)';\r\n        }\r\n      }\r\n\r\n      mq += '{#modernizr{width:7px;height:18px;margin:0;padding:0;border:0}}';\r\n\r\n      testStyles(defaultStyle + mq, function(elem) {\r\n        ret = elem.offsetWidth === 7 && elem.offsetHeight === 18;\r\n      });\r\n    }\r\n\r\n    return ret;\r\n  });\r\n\r\n/*!\r\n{\r\n  \"name\": \"CSS Transform Style preserve-3d\",\r\n  \"property\": \"preserve3d\",\r\n  \"authors\": [\"edmellum\"],\r\n  \"tags\": [\"css\"],\r\n  \"notes\": [{\r\n    \"name\": \"MDN Docs\",\r\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/transform-style\"\r\n  },{\r\n    \"name\": \"Related Github Issue\",\r\n    \"href\": \"https://github.com/Modernizr/Modernizr/issues/762\"\r\n  }]\r\n}\r\n!*/\r\n/* DOC\r\nDetects support for `transform-style: preserve-3d`, for getting a proper 3D perspective on elements.\r\n*/\r\n\r\n  Modernizr.addTest('preserve3d', testAllProps('transformStyle', 'preserve-3d'));\r\n\r\n/*!\r\n{\r\n  \"name\": \"CSS Transitions\",\r\n  \"property\": \"csstransitions\",\r\n  \"caniuse\": \"css-transitions\",\r\n  \"tags\": [\"css\"]\r\n}\r\n!*/\r\n\r\n  Modernizr.addTest('csstransitions', testAllProps('transition', 'all', true));\r\n\r\n/*!\r\n{\r\n  \"name\": \"Flexbox (tweener)\",\r\n  \"property\": \"flexboxtweener\",\r\n  \"tags\": [\"css\"],\r\n  \"polyfills\": [\"flexie\"],\r\n  \"notes\": [{\r\n    \"name\": \"The _inbetween_ flexbox\",\r\n    \"href\": \"https://www.w3.org/TR/2011/WD-css3-flexbox-20111129/\"\r\n  }],\r\n  \"warnings\": [\"This represents an old syntax, not the latest standard syntax.\"]\r\n}\r\n!*/\r\n\r\n  Modernizr.addTest('flexboxtweener', testAllProps('flexAlign', 'end', true));\r\n\r\n/*!\r\n{\r\n  \"name\": \"@font-face\",\r\n  \"property\": \"fontface\",\r\n  \"authors\": [\"Diego Perini\", \"Mat Marquis\"],\r\n  \"tags\": [\"css\"],\r\n  \"knownBugs\": [\r\n    \"False Positive: WebOS https://github.com/Modernizr/Modernizr/issues/342\",\r\n    \"False Postive: WP7 https://github.com/Modernizr/Modernizr/issues/538\"\r\n  ],\r\n  \"notes\": [{\r\n    \"name\": \"@font-face detection routine by Diego Perini\",\r\n    \"href\": \"http://javascript.nwbox.com/CSSSupport/\"\r\n  },{\r\n    \"name\": \"Filament Group @font-face compatibility research\",\r\n    \"href\": \"https://docs.google.com/presentation/d/1n4NyG4uPRjAA8zn_pSQ_Ket0RhcWC6QlZ6LMjKeECo0/edit#slide=id.p\"\r\n  },{\r\n    \"name\": \"Filament Grunticon/@font-face device testing results\",\r\n    \"href\": \"https://docs.google.com/spreadsheet/ccc?key=0Ag5_yGvxpINRdHFYeUJPNnZMWUZKR2ItMEpRTXZPdUE#gid=0\"\r\n  },{\r\n    \"name\": \"CSS fonts on Android\",\r\n    \"href\": \"https://stackoverflow.com/questions/3200069/css-fonts-on-android\"\r\n  },{\r\n    \"name\": \"@font-face and Android\",\r\n    \"href\": \"http://archivist.incutio.com/viewlist/css-discuss/115960\"\r\n  }]\r\n}\r\n!*/\r\n\r\n  var blacklist = (function() {\r\n    var ua = navigator.userAgent;\r\n    var wkvers = ua.match(/applewebkit\\/([0-9]+)/gi) && parseFloat(RegExp.$1);\r\n    var webos = ua.match(/w(eb)?osbrowser/gi);\r\n    var wppre8 = ua.match(/windows phone/gi) && ua.match(/iemobile\\/([0-9])+/gi) && parseFloat(RegExp.$1) >= 9;\r\n    var oldandroid = wkvers < 533 && ua.match(/android/gi);\r\n    return webos || oldandroid || wppre8;\r\n  }());\r\n  if (blacklist) {\r\n    Modernizr.addTest('fontface', false);\r\n  } else {\r\n    testStyles('@font-face {font-family:\"font\";src:url(\"https://\")}', function(node, rule) {\r\n      var style = document.getElementById('smodernizr');\r\n      var sheet = style.sheet || style.styleSheet;\r\n      var cssText = sheet ? (sheet.cssRules && sheet.cssRules[0] ? sheet.cssRules[0].cssText : sheet.cssText || '') : '';\r\n      var bool = /src/i.test(cssText) && cssText.indexOf(rule.split(' ')[0]) === 0;\r\n      Modernizr.addTest('fontface', bool);\r\n    });\r\n  }\r\n;\r\n/*!\r\n{\r\n  \"name\": \"SVG\",\r\n  \"property\": \"svg\",\r\n  \"caniuse\": \"svg\",\r\n  \"tags\": [\"svg\"],\r\n  \"authors\": [\"Erik Dahlstrom\"],\r\n  \"polyfills\": [\r\n    \"svgweb\",\r\n    \"raphael\",\r\n    \"amplesdk\",\r\n    \"canvg\",\r\n    \"svg-boilerplate\",\r\n    \"sie\",\r\n    \"dojogfx\",\r\n    \"fabricjs\"\r\n  ]\r\n}\r\n!*/\r\n/* DOC\r\nDetects support for SVG in `<embed>` or `<object>` elements.\r\n*/\r\n\r\n  Modernizr.addTest('svg', !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg').createSVGRect);\r\n\r\n\r\n  /**\r\n   * hasOwnProp is a shim for hasOwnProperty that is needed for Safari 2.0 support\r\n   *\r\n   * @author kangax\r\n   * @access private\r\n   * @function hasOwnProp\r\n   * @param {object} object - The object to check for a property\r\n   * @param {string} property - The property to check for\r\n   * @returns {boolean}\r\n   */\r\n\r\n  // hasOwnProperty shim by kangax needed for Safari 2.0 support\r\n  var hasOwnProp;\r\n\r\n  (function() {\r\n    var _hasOwnProperty = ({}).hasOwnProperty;\r\n    /* istanbul ignore else */\r\n    /* we have no way of testing IE 5.5 or safari 2,\r\n     * so just assume the else gets hit */\r\n    if (!is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined')) {\r\n      hasOwnProp = function(object, property) {\r\n        return _hasOwnProperty.call(object, property);\r\n      };\r\n    }\r\n    else {\r\n      hasOwnProp = function(object, property) { /* yes, this can give false positives/negatives, but most of the time we don't care about those */\r\n        return ((property in object) && is(object.constructor.prototype[property], 'undefined'));\r\n      };\r\n    }\r\n  })();\r\n\r\n  \r\n\r\n\r\n   // _l tracks listeners for async tests, as well as tests that execute after the initial run\r\n  ModernizrProto._l = {};\r\n\r\n  /**\r\n   * Modernizr.on is a way to listen for the completion of async tests. Being\r\n   * asynchronous, they may not finish before your scripts run. As a result you\r\n   * will get a possibly false negative `undefined` value.\r\n   *\r\n   * @memberof Modernizr\r\n   * @name Modernizr.on\r\n   * @access public\r\n   * @function on\r\n   * @param {string} feature - String name of the feature detect\r\n   * @param {function} cb - Callback function returning a Boolean - true if feature is supported, false if not\r\n   * @example\r\n   *\r\n   * ```js\r\n   * Modernizr.on('flash', function( result ) {\r\n   *   if (result) {\r\n   *    // the browser has flash\r\n   *   } else {\r\n   *     // the browser does not have flash\r\n   *   }\r\n   * });\r\n   * ```\r\n   */\r\n\r\n  ModernizrProto.on = function(feature, cb) {\r\n    // Create the list of listeners if it doesn't exist\r\n    if (!this._l[feature]) {\r\n      this._l[feature] = [];\r\n    }\r\n\r\n    // Push this test on to the listener list\r\n    this._l[feature].push(cb);\r\n\r\n    // If it's already been resolved, trigger it on next tick\r\n    if (Modernizr.hasOwnProperty(feature)) {\r\n      // Next Tick\r\n      setTimeout(function() {\r\n        Modernizr._trigger(feature, Modernizr[feature]);\r\n      }, 0);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * _trigger is the private function used to signal test completion and run any\r\n   * callbacks registered through [Modernizr.on](#modernizr-on)\r\n   *\r\n   * @memberof Modernizr\r\n   * @name Modernizr._trigger\r\n   * @access private\r\n   * @function _trigger\r\n   * @param {string} feature - string name of the feature detect\r\n   * @param {function|boolean} [res] - A feature detection function, or the boolean =\r\n   * result of a feature detection function\r\n   */\r\n\r\n  ModernizrProto._trigger = function(feature, res) {\r\n    if (!this._l[feature]) {\r\n      return;\r\n    }\r\n\r\n    var cbs = this._l[feature];\r\n\r\n    // Force async\r\n    setTimeout(function() {\r\n      var i, cb;\r\n      for (i = 0; i < cbs.length; i++) {\r\n        cb = cbs[i];\r\n        cb(res);\r\n      }\r\n    }, 0);\r\n\r\n    // Don't trigger these again\r\n    delete this._l[feature];\r\n  };\r\n\r\n  /**\r\n   * addTest allows you to define your own feature detects that are not currently\r\n   * included in Modernizr (under the covers it's the exact same code Modernizr\r\n   * uses for its own [feature detections](https://github.com/Modernizr/Modernizr/tree/master/feature-detects)). Just like the offical detects, the result\r\n   * will be added onto the Modernizr object, as well as an appropriate className set on\r\n   * the html element when configured to do so\r\n   *\r\n   * @memberof Modernizr\r\n   * @name Modernizr.addTest\r\n   * @optionName Modernizr.addTest()\r\n   * @optionProp addTest\r\n   * @access public\r\n   * @function addTest\r\n   * @param {string|object} feature - The string name of the feature detect, or an\r\n   * object of feature detect names and test\r\n   * @param {function|boolean} test - Function returning true if feature is supported,\r\n   * false if not. Otherwise a boolean representing the results of a feature detection\r\n   * @example\r\n   *\r\n   * The most common way of creating your own feature detects is by calling\r\n   * `Modernizr.addTest` with a string (preferably just lowercase, without any\r\n   * punctuation), and a function you want executed that will return a boolean result\r\n   *\r\n   * ```js\r\n   * Modernizr.addTest('itsTuesday', function() {\r\n   *  var d = new Date();\r\n   *  return d.getDay() === 2;\r\n   * });\r\n   * ```\r\n   *\r\n   * When the above is run, it will set Modernizr.itstuesday to `true` when it is tuesday,\r\n   * and to `false` every other day of the week. One thing to notice is that the names of\r\n   * feature detect functions are always lowercased when added to the Modernizr object. That\r\n   * means that `Modernizr.itsTuesday` will not exist, but `Modernizr.itstuesday` will.\r\n   *\r\n   *\r\n   *  Since we only look at the returned value from any feature detection function,\r\n   *  you do not need to actually use a function. For simple detections, just passing\r\n   *  in a statement that will return a boolean value works just fine.\r\n   *\r\n   * ```js\r\n   * Modernizr.addTest('hasJquery', 'jQuery' in window);\r\n   * ```\r\n   *\r\n   * Just like before, when the above runs `Modernizr.hasjquery` will be true if\r\n   * jQuery has been included on the page. Not using a function saves a small amount\r\n   * of overhead for the browser, as well as making your code much more readable.\r\n   *\r\n   * Finally, you also have the ability to pass in an object of feature names and\r\n   * their tests. This is handy if you want to add multiple detections in one go.\r\n   * The keys should always be a string, and the value can be either a boolean or\r\n   * function that returns a boolean.\r\n   *\r\n   * ```js\r\n   * var detects = {\r\n   *  'hasjquery': 'jQuery' in window,\r\n   *  'itstuesday': function() {\r\n   *    var d = new Date();\r\n   *    return d.getDay() === 2;\r\n   *  }\r\n   * }\r\n   *\r\n   * Modernizr.addTest(detects);\r\n   * ```\r\n   *\r\n   * There is really no difference between the first methods and this one, it is\r\n   * just a convenience to let you write more readable code.\r\n   */\r\n\r\n  function addTest(feature, test) {\r\n\r\n    if (typeof feature == 'object') {\r\n      for (var key in feature) {\r\n        if (hasOwnProp(feature, key)) {\r\n          addTest(key, feature[ key ]);\r\n        }\r\n      }\r\n    } else {\r\n\r\n      feature = feature.toLowerCase();\r\n      var featureNameSplit = feature.split('.');\r\n      var last = Modernizr[featureNameSplit[0]];\r\n\r\n      // Again, we don't check for parent test existence. Get that right, though.\r\n      if (featureNameSplit.length == 2) {\r\n        last = last[featureNameSplit[1]];\r\n      }\r\n\r\n      if (typeof last != 'undefined') {\r\n        // we're going to quit if you're trying to overwrite an existing test\r\n        // if we were to allow it, we'd do this:\r\n        //   var re = new RegExp(\"\\\\b(no-)?\" + feature + \"\\\\b\");\r\n        //   docElement.className = docElement.className.replace( re, '' );\r\n        // but, no rly, stuff 'em.\r\n        return Modernizr;\r\n      }\r\n\r\n      test = typeof test == 'function' ? test() : test;\r\n\r\n      // Set the value (this is the magic, right here).\r\n      if (featureNameSplit.length == 1) {\r\n        Modernizr[featureNameSplit[0]] = test;\r\n      } else {\r\n        // cast to a Boolean, if not one already\r\n        /* jshint -W053 */\r\n        if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\r\n          Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\r\n        }\r\n\r\n        Modernizr[featureNameSplit[0]][featureNameSplit[1]] = test;\r\n      }\r\n\r\n      // Set a single class (either `feature` or `no-feature`)\r\n      /* jshint -W041 */\r\n      setClasses([(!!test && test != false ? '' : 'no-') + featureNameSplit.join('-')]);\r\n      /* jshint +W041 */\r\n\r\n      // Trigger the event\r\n      Modernizr._trigger(feature, test);\r\n    }\r\n\r\n    return Modernizr; // allow chaining.\r\n  }\r\n\r\n  // After all the tests are run, add self to the Modernizr prototype\r\n  Modernizr._q.push(function() {\r\n    ModernizrProto.addTest = addTest;\r\n  });\r\n\r\n  \r\n\r\n/*!\r\n{\r\n  \"name\": \"SVG as an <img> tag source\",\r\n  \"property\": \"svgasimg\",\r\n  \"caniuse\" : \"svg-img\",\r\n  \"tags\": [\"svg\"],\r\n  \"authors\": [\"Chris Coyier\"],\r\n  \"notes\": [{\r\n    \"name\": \"HTML5 Spec\",\r\n    \"href\": \"http://www.w3.org/TR/html5/embedded-content-0.html#the-img-element\"\r\n  }]\r\n}\r\n!*/\r\n\r\n\r\n  // Original Async test by Stu Cox\r\n  // https://gist.github.com/chriscoyier/8774501\r\n\r\n  // Now a Sync test based on good results here\r\n  // http://codepen.io/chriscoyier/pen/bADFx\r\n\r\n  // Note http://www.w3.org/TR/SVG11/feature#Image is *supposed* to represent\r\n  // support for the `<image>` tag in SVG, not an SVG file linked from an `<img>`\r\n  // tag in HTML – but it’s a heuristic which works\r\n  Modernizr.addTest('svgasimg', document.implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#Image', '1.1'));\r\n\r\n\r\n  /**\r\n   * Object.prototype.toString can be used with every object and allows you to\r\n   * get its class easily. Abstracting it off of an object prevents situations\r\n   * where the toString property has been overridden\r\n   *\r\n   * @access private\r\n   * @function toStringFn\r\n   * @returns {function} An abstracted toString function\r\n   */\r\n\r\n  var toStringFn = ({}).toString;\r\n  \r\n/*!\r\n{\r\n  \"name\": \"SVG clip paths\",\r\n  \"property\": \"svgclippaths\",\r\n  \"tags\": [\"svg\"],\r\n  \"notes\": [{\r\n    \"name\": \"Demo\",\r\n    \"href\": \"http://srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath4.svg\"\r\n  }]\r\n}\r\n!*/\r\n/* DOC\r\nDetects support for clip paths in SVG (only, not on HTML content).\r\n\r\nSee [this discussion](https://github.com/Modernizr/Modernizr/issues/213) regarding applying SVG clip paths to HTML content.\r\n*/\r\n\r\n  Modernizr.addTest('svgclippaths', function() {\r\n    return !!document.createElementNS &&\r\n      /SVGClipPath/.test(toStringFn.call(document.createElementNS('http://www.w3.org/2000/svg', 'clipPath')));\r\n  });\r\n\r\n/*!\r\n{\r\n  \"name\": \"SVG filters\",\r\n  \"property\": \"svgfilters\",\r\n  \"caniuse\": \"svg-filters\",\r\n  \"tags\": [\"svg\"],\r\n  \"builderAliases\": [\"svg_filters\"],\r\n  \"authors\": [\"Erik Dahlstrom\"],\r\n  \"notes\": [{\r\n    \"name\": \"W3C Spec\",\r\n    \"href\": \"https://www.w3.org/TR/SVG11/filters.html\"\r\n  }]\r\n}\r\n!*/\r\n\r\n  // Should fail in Safari: https://stackoverflow.com/questions/9739955/feature-detecting-support-for-svg-filters.\r\n  Modernizr.addTest('svgfilters', function() {\r\n    var result = false;\r\n    try {\r\n      result = 'SVGFEColorMatrixElement' in window &&\r\n        SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_SATURATE == 2;\r\n    }\r\n    catch (e) {}\r\n    return result;\r\n  });\r\n\r\n/*!\r\n{\r\n  \"name\": \"SVG foreignObject\",\r\n  \"property\": \"svgforeignobject\",\r\n  \"tags\": [\"svg\"],\r\n  \"notes\": [{\r\n    \"name\": \"W3C Spec\",\r\n    \"href\": \"https://www.w3.org/TR/SVG11/extend.html\"\r\n  }]\r\n}\r\n!*/\r\n/* DOC\r\nDetects support for foreignObject tag in SVG.\r\n*/\r\n\r\n  Modernizr.addTest('svgforeignobject', function() {\r\n    return !!document.createElementNS &&\r\n      /SVGForeignObject/.test(toStringFn.call(document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject')));\r\n  });\r\n\r\n/*!\r\n{\r\n  \"name\": \"Inline SVG\",\r\n  \"property\": \"inlinesvg\",\r\n  \"caniuse\": \"svg-html5\",\r\n  \"tags\": [\"svg\"],\r\n  \"notes\": [{\r\n    \"name\": \"Test page\",\r\n    \"href\": \"https://paulirish.com/demo/inline-svg\"\r\n  }, {\r\n    \"name\": \"Test page and results\",\r\n    \"href\": \"https://codepen.io/eltonmesquita/full/GgXbvo/\"\r\n  }],\r\n  \"polyfills\": [\"inline-svg-polyfill\"],\r\n  \"knownBugs\": [\"False negative on some Chromia browsers.\"]\r\n}\r\n!*/\r\n/* DOC\r\nDetects support for inline SVG in HTML (not within XHTML).\r\n*/\r\n\r\n  Modernizr.addTest('inlinesvg', function() {\r\n    var div = createElement('div');\r\n    div.innerHTML = '<svg/>';\r\n    return (typeof SVGRect != 'undefined' && div.firstChild && div.firstChild.namespaceURI) == 'http://www.w3.org/2000/svg';\r\n  });\r\n\r\n/*!\r\n{\r\n  \"name\": \"SVG SMIL animation\",\r\n  \"property\": \"smil\",\r\n  \"caniuse\": \"svg-smil\",\r\n  \"tags\": [\"svg\"],\r\n  \"notes\": [{\r\n  \"name\": \"W3C Synchronised Multimedia spec\",\r\n  \"href\": \"https://www.w3.org/AudioVideo/\"\r\n  }]\r\n}\r\n!*/\r\n\r\n  // SVG SMIL animation\r\n  Modernizr.addTest('smil', function() {\r\n    return !!document.createElementNS &&\r\n      /SVGAnimate/.test(toStringFn.call(document.createElementNS('http://www.w3.org/2000/svg', 'animate')));\r\n  });\r\n\r\n/*!\r\n{\r\n  \"name\": \"Local Storage\",\r\n  \"property\": \"localstorage\",\r\n  \"caniuse\": \"namevalue-storage\",\r\n  \"tags\": [\"storage\"],\r\n  \"knownBugs\": [],\r\n  \"notes\": [],\r\n  \"warnings\": [],\r\n  \"polyfills\": [\r\n    \"joshuabell-polyfill\",\r\n    \"cupcake\",\r\n    \"storagepolyfill\",\r\n    \"amplifyjs\",\r\n    \"yui-cacheoffline\"\r\n  ]\r\n}\r\n!*/\r\n\r\n  // In FF4, if disabled, window.localStorage should === null.\r\n\r\n  // Normally, we could not test that directly and need to do a\r\n  //   `('localStorage' in window) && ` test first because otherwise Firefox will\r\n  //   throw bugzil.la/365772 if cookies are disabled\r\n\r\n  // Also in iOS5 Private Browsing mode, attempting to use localStorage.setItem\r\n  // will throw the exception:\r\n  //   QUOTA_EXCEEDED_ERROR DOM Exception 22.\r\n  // Peculiarly, getItem and removeItem calls do not throw.\r\n\r\n  // Because we are forced to try/catch this, we'll go aggressive.\r\n\r\n  // Just FWIW: IE8 Compat mode supports these features completely:\r\n  //   www.quirksmode.org/dom/html5.html\r\n  // But IE8 doesn't support either with local files\r\n\r\n  Modernizr.addTest('localstorage', function() {\r\n    var mod = 'modernizr';\r\n    try {\r\n      localStorage.setItem(mod, mod);\r\n      localStorage.removeItem(mod);\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  });\r\n\r\n/*!\r\n{\r\n  \"name\": \"Session Storage\",\r\n  \"property\": \"sessionstorage\",\r\n  \"tags\": [\"storage\"],\r\n  \"polyfills\": [\"joshuabell-polyfill\", \"cupcake\", \"sessionstorage\"]\r\n}\r\n!*/\r\n\r\n  // Because we are forced to try/catch this, we'll go aggressive.\r\n\r\n  // Just FWIW: IE8 Compat mode supports these features completely:\r\n  //   www.quirksmode.org/dom/html5.html\r\n  // But IE8 doesn't support either with local files\r\n  Modernizr.addTest('sessionstorage', function() {\r\n    var mod = 'modernizr';\r\n    try {\r\n      sessionStorage.setItem(mod, mod);\r\n      sessionStorage.removeItem(mod);\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  });\r\n\r\n/*!\r\n{\r\n  \"name\": \"Web SQL Database\",\r\n  \"property\": \"websqldatabase\",\r\n  \"caniuse\": \"sql-storage\",\r\n  \"tags\": [\"storage\"]\r\n}\r\n!*/\r\n\r\n  // Chrome incognito mode used to throw an exception when using openDatabase\r\n  // It doesn't anymore.\r\n  Modernizr.addTest('websqldatabase', 'openDatabase' in window);\r\n\r\n/*!\r\n{\r\n  \"name\": \"CSS Multiple Backgrounds\",\r\n  \"caniuse\": \"multibackgrounds\",\r\n  \"property\": \"multiplebgs\",\r\n  \"tags\": [\"css\"]\r\n}\r\n!*/\r\n\r\n  // Setting multiple images AND a color on the background shorthand property\r\n  // and then querying the style.background property value for the number of\r\n  // occurrences of \"url(\" is a reliable method for detecting ACTUAL support for this!\r\n\r\n  Modernizr.addTest('multiplebgs', function() {\r\n    var style = createElement('a').style;\r\n    style.cssText = 'background:url(https://),url(https://),red url(https://)';\r\n\r\n    // If the UA supports multiple backgrounds, there should be three occurrences\r\n    // of the string \"url(\" in the return value for elemStyle.background\r\n    return (/(url\\s*\\(.*?){3}/).test(style.background);\r\n  });\r\n\r\n\r\n  // Run each test\r\n  testRunner();\r\n\r\n  // Remove the \"no-js\" class if it exists\r\n  setClasses(classes);\r\n\r\n  delete ModernizrProto.addTest;\r\n  delete ModernizrProto.addAsyncTest;\r\n\r\n  // Run the things that are supposed to run after the tests\r\n  for (var i = 0; i < Modernizr._q.length; i++) {\r\n    Modernizr._q[i]();\r\n  }\r\n\r\n  // Leak Modernizr namespace\r\n  window.Modernizr = Modernizr;\r\n\r\n\r\n;\r\n\r\n})(window, document);",null]}