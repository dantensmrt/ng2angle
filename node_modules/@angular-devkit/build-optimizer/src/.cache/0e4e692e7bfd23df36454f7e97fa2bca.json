{"remainingRequest":"/Users/danoand/Documents/Companies/TenantSmart/POC/bootstrap/WB04HF123/angular6/ng2angle/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/danoand/Documents/Companies/TenantSmart/POC/bootstrap/WB04HF123/angular6/ng2angle/node_modules/angular2-toaster/src/toaster.service.js","dependencies":[{"path":"/Users/danoand/Documents/Companies/TenantSmart/POC/bootstrap/WB04HF123/angular6/ng2angle/node_modules/angular2-toaster/src/toaster.service.js","mtime":1521234145000},{"path":"/Users/danoand/Documents/Companies/TenantSmart/POC/bootstrap/WB04HF123/angular6/ng2angle/node_modules/cache-loader/dist/cjs.js","mtime":1529365652000},{"path":"/Users/danoand/Documents/Companies/TenantSmart/POC/bootstrap/WB04HF123/angular6/ng2angle/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1525974352000}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/share';\nimport { Subject } from 'rxjs/Subject';\n// http://stackoverflow.com/questions/26501688/a-typescript-guid-class\nvar \n// http://stackoverflow.com/questions/26501688/a-typescript-guid-class\nGuid = /*@__PURE__*/ (function () {\n    function Guid() {\n    }\n    Guid.newGuid = function () {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n    return Guid;\n}());\nvar ToasterService = /*@__PURE__*/ (function () {\n    /**\n     * Creates an instance of ToasterService.\n     */\n    function ToasterService() {\n        var _this = this;\n        this.addToast = new Observable(function (observer) { return _this._addToast = observer; }).share();\n        this.clearToasts = new Observable(function (observer) { return _this._clearToasts = observer; }).share();\n        this._removeToastSubject = new Subject();\n        this.removeToast = this._removeToastSubject.share();\n    }\n    /**\n     * Synchronously create and show a new toast instance.\n     *\n     * @param {(string | Toast)} type The type of the toast, or a Toast object.\n     * @param {string=} title The toast title.\n     * @param {string=} body The toast body.\n     * @returns {Toast}\n     *          The newly created Toast instance with a randomly generated GUID Id.\n     */\n    /**\n         * Synchronously create and show a new toast instance.\n         *\n         * @param {(string | Toast)} type The type of the toast, or a Toast object.\n         * @param {string=} title The toast title.\n         * @param {string=} body The toast body.\n         * @returns {Toast}\n         *          The newly created Toast instance with a randomly generated GUID Id.\n         */\n    ToasterService.prototype.pop = /**\n         * Synchronously create and show a new toast instance.\n         *\n         * @param {(string | Toast)} type The type of the toast, or a Toast object.\n         * @param {string=} title The toast title.\n         * @param {string=} body The toast body.\n         * @returns {Toast}\n         *          The newly created Toast instance with a randomly generated GUID Id.\n         */\n        function (type, title, body) {\n            var toast = typeof type === 'string' ? { type: type, title: title, body: body } : type;\n            toast.toastId = Guid.newGuid();\n            if (!this._addToast) {\n                throw new Error('No Toaster Containers have been initialized to receive toasts.');\n            }\n            this._addToast.next(toast);\n            return toast;\n        };\n    /**\n     * Asynchronously create and show a new toast instance.\n     *\n     * @param {(string | Toast)} type The type of the toast, or a Toast object.\n     * @param {string=} title The toast title.\n     * @param {string=} body The toast body.\n     * @returns {Observable<Toast>}\n     *          A hot Observable that can be subscribed to in order to receive the Toast instance\n     *          with a randomly generated GUID Id.\n     */\n    /**\n         * Asynchronously create and show a new toast instance.\n         *\n         * @param {(string | Toast)} type The type of the toast, or a Toast object.\n         * @param {string=} title The toast title.\n         * @param {string=} body The toast body.\n         * @returns {Observable<Toast>}\n         *          A hot Observable that can be subscribed to in order to receive the Toast instance\n         *          with a randomly generated GUID Id.\n         */\n    ToasterService.prototype.popAsync = /**\n         * Asynchronously create and show a new toast instance.\n         *\n         * @param {(string | Toast)} type The type of the toast, or a Toast object.\n         * @param {string=} title The toast title.\n         * @param {string=} body The toast body.\n         * @returns {Observable<Toast>}\n         *          A hot Observable that can be subscribed to in order to receive the Toast instance\n         *          with a randomly generated GUID Id.\n         */\n        function (type, title, body) {\n            var _this = this;\n            setTimeout(function () {\n                _this.pop(type, title, body);\n            }, 0);\n            return this.addToast;\n        };\n    /**\n     * Clears a toast by toastId and/or toastContainerId.\n     *\n     * @param {string} toastId The toastId to clear.\n     * @param {number=} toastContainerId\n     *        The toastContainerId of the container to remove toasts from.\n     */\n    /**\n         * Clears a toast by toastId and/or toastContainerId.\n         *\n         * @param {string} toastId The toastId to clear.\n         * @param {number=} toastContainerId\n         *        The toastContainerId of the container to remove toasts from.\n         */\n    ToasterService.prototype.clear = /**\n         * Clears a toast by toastId and/or toastContainerId.\n         *\n         * @param {string} toastId The toastId to clear.\n         * @param {number=} toastContainerId\n         *        The toastContainerId of the container to remove toasts from.\n         */\n        function (toastId, toastContainerId) {\n            var clearWrapper = {\n                toastId: toastId, toastContainerId: toastContainerId\n            };\n            this._clearToasts.next(clearWrapper);\n        };\n    return ToasterService;\n}());\nexport { ToasterService };\n//# sourceMappingURL=toaster.service.js.map\n",null]}